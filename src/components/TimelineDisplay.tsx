import React, { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import { format } from "date-fns";
import { Bot, FileText } from "lucide-react";
import { Button } from "@/components/ui/button";
import { DocumentViewer } from "./DocumentViewer";

interface TimelineEvent {
  id: string;
  timestamp: Date;
  title: string;
  description: string;
  relevant_file_ids: string[] | null;
}

interface FileMetadata {
  id: string;
  file_name: string;
  file_path: string;
  description: string | null;
  tags: string[] | null;
  suggested_name: string | null;
  file_hash: string | null;
  hash_algorithm: string | null;
}

interface TimelineDisplayProps {
  caseId: string;
}

export const TimelineDisplay: React.FC<TimelineDisplayProps> = ({ caseId }) => {
  const [timelineEvents, setTimelineEvents] = useState<TimelineEvent[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [allFilesMetadata, setAllFilesMetadata] = useState<FileMetadata[]>([]);
  const [isViewerOpen, setIsViewerOpen] = useState(false);
  const [selectedFile, setSelectedFile] = useState<FileMetadata | null>(null);

  const fetchTimelineData = async () => {
    setLoading(true);
    setError(null);

    try {
      // Fetch auto-generated timeline events from case_insights
      const { data: autoEventsData, error: autoEventsError } = await supabase
        .from("case_insights")
        .select("id, timestamp, title, description, relevant_file_ids")
        .eq("case_id", caseId)
        .eq("insight_type", "auto_generated_event")
        .order("timestamp", { ascending: true });

      if (autoEventsError) throw autoEventsError;

      const events: TimelineEvent[] = (autoEventsData || []).map(event => ({
        id: event.id,
        timestamp: new Date(event.timestamp),
        title: event.title,
        description: event.description,
        relevant_file_ids: event.relevant_file_ids,
      }));
      setTimelineEvents(events);

      // Fetch all file metadata for linking
      const { data: filesData, error: filesError } = await supabase
        .from('case_files_metadata')
        .select('id, file_name, file_path, description, tags, suggested_name, file_hash, hash_algorithm')
        .eq('case_id', caseId);

      if (filesError) throw filesError;
      setAllFilesMetadata(filesData || []);

    } catch (err: any) {
      console.error("Error fetching timeline data:", err);
      setError("Failed to load timeline data. Please try again.");
      toast.error("Failed to load timeline data.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (!caseId) {
      setError("No case ID provided for timeline.");
      setLoading(false);
      return;
    }

    fetchTimelineData();

    const channel = supabase
      .channel(`timeline_insights_for_case_${caseId}`)
      .on('postgres_changes', { event: '*', schema: 'public', table: 'case_insights', filter: `case_id=eq.${caseId}` }, (payload) => {
        if (payload.new && (payload.new as any).insight_type === 'auto_generated_event') {
          fetchTimelineData(); // Re-fetch if a new timeline event is inserted
        }
      })
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [caseId]);

  const handleFileLinkClick = (fileId: string) => {
    const file = allFilesMetadata.find(f => f.id === fileId);
    if (file) {
      setSelectedFile(file);
      setIsViewerOpen(true);
    } else {
      toast.error("File not found or metadata missing.");
    }
  };

  if (loading) {
    return <div className="text-center py-8 text-muted-foreground">Loading timeline...</div>;
  }

  if (error) {
    return <div className="text-center py-8 text-red-500">{error}</div>;
  }

  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle>Case Timeline</CardTitle>
        <CardDescription>Key events and updates in the case analysis, generated by AI.</CardDescription>
      </CardHeader>
      <CardContent className="flex-1 overflow-hidden">
        <ScrollArea className="h-full pr-4">
          {timelineEvents.length > 0 ? (
            <div className="relative pl-6 border-l-2 border-gray-200 dark:border-gray-700">
              {timelineEvents.map((event) => (
                <div key={event.id} className="mb-8 last:mb-0">
                  <div className="absolute -left-2.5 mt-1 h-4 w-4 rounded-full border-2 border-background bg-primary" />
                  <div className="ml-4">
                    <p className="text-xs text-muted-foreground">
                      {format(event.timestamp, "MMM dd, yyyy HH:mm")}
                    </p>
                    <h3 className="font-semibold text-foreground mt-1 flex items-center">
                      <Bot className="h-4 w-4 mr-2 text-blue-500" />
                      {event.title}
                    </h3>
                    <p className="text-sm text-muted-foreground">{event.description}</p>
                    {event.relevant_file_ids && event.relevant_file_ids.length > 0 && (
                      <div className="mt-2 flex flex-wrap gap-2">
                        {event.relevant_file_ids.map(fileId => {
                          const file = allFilesMetadata.find(f => f.id === fileId);
                          return file ? (
                            <Button
                              key={fileId}
                              variant="outline"
                              size="sm"
                              className="h-7 px-3 text-xs"
                              onClick={() => handleFileLinkClick(fileId)}
                            >
                              <FileText className="h-3 w-3 mr-1" />
                              {file.suggested_name || file.file_name}
                            </Button>
                          ) : null;
                        })}
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-center py-4 text-muted-foreground">
              No timeline events generated yet. Run a full analysis or generate a focused timeline from the "Tools" tab.
            </p>
          )}
        </ScrollArea>
      </CardContent>
      <DocumentViewer
        file={selectedFile}
        isOpen={isViewerOpen}
        onOpenChange={setIsViewerOpen}
      />
    </Card>
  );
};